# -*- coding: utf-8 -*-
"""Untitled24.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zsfL8ZdblrReExona2fiPrt7J_PE_eSb
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf
import keras

(x_train, y_train), (x_test, y_test) = tf.keras.datasets.fashion_mnist.load_data()

x_train.shape, y_train.shape, "******", x_test.shape, y_test.shape

x_train[0] #image data is in 2d numpy array shape 28*28 pixel



y_train[0]

class_labels=["T-shirt/top" , "Trouser" , "Pullover", "Dress" , "Coat","Sandal","Shirt","Sneaker","Bag","Ankle boot"]
class_labels

plt.imshow(x_train[0], cmap='Greys')

plt.figure(figsize=(16,16))
j=1
for i in np.random.randint(0, 1000, 25):
  plt.subplot(5,5,j)
  j+=1
  plt.imshow(x_train[i], cmap="Greys")
  plt.axis('off') #off the axis
  plt.title('{} / {}'.format(class_labels[y_train[i]], y_train[i]))

x_train.shape

x_train.ndim

x_train = np.expand_dims(x_train, -1)
x_test = np.expand_dims(x_test, -1)

x_train.ndim #image coverted to 4 dimentional

x_train =x_train/255
x_test=x_test/255

#splitting the dataset
from sklearn.model_selection import train_test_split
x_train, x_validation, y_train, y_validation = train_test_split(x_train, y_train, test_size=0.2, random_state=2020)

x_train.shape, y_train.shape, x_validation.shape, y_validation.shape

#building CNN model
cnn_model=keras.models.Sequential([
    tf.keras.layers.Conv2D(filters=32, kernal_size=3, strides=(1,1), padding='valid', activation='relu', input_shape=[28,28,1]),
tf.keras.layers.MaxPooling2D(pool_size=(2,2)),
        tf.keras.layers.Conv2D(filters=64, kernal_size=3, strides=(2,2), padding='same', activation='relu'),
    tf.keras.layers.MaxPooling2D(pool_size=(2,2)),
    tf.keras.layers.Flatten(),
    tf.keras.Dense(units=128,activation='relu'),
    tf.keras.layers.Dropout(0.25),
    tf.keras.layers.Dense(units=256, activation='relu'),
    tf.keras.layers.Dropout(0.25),
      tf.keras.Dense(units=128,activation='relu'),
     tf.keras.layers.Dense(units=10, activation='softmax'),
])

cnn_model = keras.models.Sequential([
    tf.keras.layers.Conv2D(filters=32, kernel_size=3, strides=(1, 1), padding='valid', activation='relu', input_shape=[28, 28, 1]),
    tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),
    tf.keras.layers.Conv2D(filters=64, kernel_size=3, strides=(2, 2), padding='same', activation='relu'),
    tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(units=128, activation='relu'),
    tf.keras.layers.Dropout(0.25),
    tf.keras.layers.Dense(units=256, activation='relu'),
    tf.keras.layers.Dropout(0.25),
    tf.keras.layers.Dense(units=128, activation='relu'),
    tf.keras.layers.Dense(units=10, activation='softmax'),
])

# Compile the model
cnn_model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Train the model
cnn_model.fit(x_train, y_train, epochs=28, batch_size=16, verbose=1, validation_data=(x_validation, y_validation))

y_pred=cnn_model.predict(x_test)

cnn_model.evaluate(x_test, y_test)

plt.figure(figsize=(16,30))
j=1
for i in np.random.randint(0, 1000, 60):
  plt.subplot(10,6,j)
  j+=1
  plt.imshow(x_train[i], cmap="Greys")
  plt.axis('off') #off the axis
  plt.title("Actual = {} / {} \nPredicted = {} / {}".format(class_labels[y_test[i]], y_test[i], class_labels[np.argmax(y_pred[i])], np.argmax(y_pred[i])))
  plt.axis('off')

from sklearn.metrics import confusion_matrix

plt.figure(figsize=(16,9))
y_pred_labels=[np.argmax(label) for label in y_pred]
cnn = confusion_matrix(y_test, y_pred_labels)

#show cnn
sns.heatmap(cnn, annot=True, fmt='d', xticklabels=class_labels, yticklabels=class_labels)

from sklearn.metrics import classification_report
cr= classification_report(y_test, y_pred_labels, target_names=class_labels)
print(cr)

#save model

cnn_model.save('fashion_mnist_cnn_model.h5')

y_pred_sample = cnn_model.predict(np.expand_dims(x_test[0], axis=0)).round(2)
predicted_class = np.argmax(y_pred_sample[0])



y_test[0] #single image

